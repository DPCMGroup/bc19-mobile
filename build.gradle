// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.3.72"
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.nbaztec:coveralls-jacoco-gradle-plugin:1.2.12"
        classpath 'org.jacoco:org.jacoco.core:0.8.1' //Use latest version

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.github.nbaztec.coveralls-jacoco" version "1.2.12"
    id "org.sonarqube" version "3.2.0"
}

apply plugin: 'jacoco'
apply plugin: 'com.github.nbaztec.coveralls-jacoco'
apply plugin: 'com.android.application'

sonarqube {
    properties {
        property "sonar.projectKey", "DPCMGroup_bc19-mobile"
        property "sonar.organization", "dpcmgroup"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

jacoco {
    toolVersion = '0.8.1' //Use latest version
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
}
// ignore any subproject, if required `subprojects.findAll{ it.name != 'customSubProject' }`
def coveredProjects = subprojects

// configure() method takes a list as an argument and applies the configuration to the projects in this list.
        configure(coveredProjects) { p ->
            p.evaluate()

            // Here we apply jacoco plugin to every project
            apply plugin: 'jacoco'
            // Set Jacoco version
            jacoco {
                toolVersion = "0.8.5"
            }

            // Here we create the task to generate Jacoco report
            // It depends to unit test task we don't have to manually running unit test before the task
            task jacocoReport(type: JacocoReport, dependsOn: 'test') {

                // Define what type of report we should generate
                // If we don't want to process the data further, html should be enough
                reports {
                    xml.enabled = true
                    html.enabled = true
                }

                // Setup the .class, source, and execution directories
                final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']

                sourceDirectories.setFrom files(["${p.projectDir}/src/main/java"])
                classDirectories.setFrom files([fileTree(dir: "${p.buildDir}/classes", excludes: fileFilter)])
                executionData.setFrom fileTree(dir: p.buildDir, includes: [
                        'jacoco/*.exec', 'outputs/code-coverage/connected/*coverage.ec'
                ])
            }
        }

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    def projects = coveredProjects

    // Here we depend on the jacocoReport task that we created before
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file("$buildDir/reports/jacoco/html")
        }
        xml {
            enabled true
            destination file("$buildDir/reports/jacoco/jacocoFullReport.xml")
        }
    }

    doFirst {
        executionData.setFrom files(executionData.findAll { it.exists() })
    }

    coverallsJacoco {
        reportPath = "$buildDir/reports/jacoco/jacocoFullReport.xml"
        reportSourceSets =  projects.jacocoReport.sourceDirectories.collect{ it.getFiles() }.flatten()
    }
}

